"""
Django settings for iRN project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'messaging', '.env'))

# Email Configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-3*($1xgvdk&rc(db168t3t+kdm$)19_4%-f2==#k+x@qbra%5g"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'crispy_forms',
    "crispy_bootstrap5",
    # "users",
    "messaging",
    'dal', # Django Autocomplete Light
    'dal_select2', # Django Autocomplete Light - Django Select2 UI
    'forms_builder',
    'reversion',
    'submission',
    'users.apps.UsersConfig',
    'review',
    'feedback',
    
    
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "iRN.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / 'users' / 'templates'/'users',  # Added path to user templates
            BASE_DIR / 'forms_builder' / 'templates' / 'admin' / 'forms_builder',  # Added forms_builder templates
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

CRISPY_TEMPLATE_PACK = 'bootstrap5'
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

WSGI_APPLICATION = "iRN.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Add this near your other static file settings
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# settings.py
# MEDIA_URL: The URL that serves media files uploaded by users.
# MEDIA_ROOT: The filesystem path where uploaded media files are stored.

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# Add this near the bottom of the file
AUTHENTICATION_BACKENDS = [
    'users.backends.EmailOrUsernameModelBackend',
    'django.contrib.auth.backends.ModelBackend',
]

AUTH_USER_MODEL = 'auth.User'  # Use this if you're using the default Django User model
# AUTH_USER_MODEL = 'users.CustomUser'  # Use this if you have a custom User model

# Add these lines near the bottom of the file
# Authentication settings
LOGIN_URL = 'users:login'
LOGIN_REDIRECT_URL = 'submission:dashboard'
LOGOUT_REDIRECT_URL = 'users:login'


# settings.py additions
from dotenv import load_dotenv
load_dotenv()

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', default=None)
OPENAI_MODEL = os.getenv('OPENAI_MODEL', default='gpt-4o-mini')

# Initialize OpenAI client
import openai
openai.api_key = OPENAI_API_KEY


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

DATATABLES_PAGE_LENGTH = 10

import os
from pathlib import Path

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    'handlers': {
        'users_file': {
            'class': 'logging.handlers.RotatingFileHandler',  # Use rotating handler
            'filename': os.path.join(LOGS_DIR, 'users.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024,  # 1MB
            'backupCount': 3,
            'level': 'INFO'
        },
        'security_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'security.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024,  # 1MB
            'backupCount': 3,
            'level': 'INFO'
        },
        'critical_errors': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'critical.log'),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024,  # 1MB
            'backupCount': 3,
            'level': 'ERROR'
        }
    },
    'loggers': {
        # Your application loggers
        'IRN.users': {
            'handlers': ['users_file', 'critical_errors'],
            'level': 'INFO',
            'propagate': False,
        },
        'IRN.security': {
            'handlers': ['security_file', 'critical_errors'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}

# Only add console logging in DEBUG mode
if DEBUG:
    LOGGING['handlers']['console'] = {
        'class': 'logging.StreamHandler',
        'formatter': 'verbose',
        'level': 'INFO'
    }
    # Add console handler to each logger
    for logger in LOGGING['loggers'].values():
        logger['handlers'].append('console')
# Make sure debug messages are displayed in development
if DEBUG:
    for logger in LOGGING['loggers'].values():
        logger['level'] = 'DEBUG'
# # System user settings
# SYSTEM_EMAIL = 'aidi@khcc.jo'
# SYSTEM_NAME = 'AIDI System'
# SYSTEM_USERNAME = 'system'
# You can now use these settings anywhere in your application by importing from users.settings. For example:

# from users.settings import get_system_email, get_system_name
# system_email = get_system_email()
# system_name = get_system_name()